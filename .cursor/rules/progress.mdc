---
alwaysApply: false
---

# BaseCard Mini App - Development Progress

## 🎯 프로젝트 목적

BaseCard NFT Mini App의 메인 페이지를 디자인 이미지에 맞게 개발하고, iPhone 14-16 사용자를 위한 반응형 웹 애플리케이션 구축

## 📋 주요 목표

1. **메인 페이지 디자인 구현**: 제공된 디자인 이미지(`main-page-1.png`, `main-page-2.png`)와 일치하는 UI 구현
2. **백그라운드 이미지 통합**: `landing-page-background.png`와 `mock-basecard.png` 에셋 활용
3. **반응형 디자인**: iPhone 14-16 최적화
4. **폰트 시스템 구축**: K2D 폰트 적용 및 최적화

## ✅ 완료된 작업

### 1. 메인 페이지 구조 재설계

-   **기존 구조**: 단순한 컴포넌트 기반 레이아웃
-   **새로운 구조**: Hero Section + Collect Cards Section으로 분리
-   **파일 구조**:
    ```
    app/(main)/page.tsx - 메인 페이지 라우터
    components/main/HeroSection.tsx - 히어로 섹션
    components/main/CollectCardsSection.tsx - 카드 수집 섹션
    ```

### 2. Hero Section 구현

-   **백그라운드 이미지**: `landing-page-background.png`를 메인 시각 요소로 활용
-   **투명도 제거**: 오버레이 효과 제거하여 원본 이미지 그대로 표시
-   **텍스트 가독성**: `drop-shadow` 효과로 백그라운드 위 텍스트 가독성 확보
-   **3D 카드 제거**: 사용자 요청에 따라 3D 카드 컴포넌트 제거
-   **레이아웃 최적화**:
    -   제목: `text-5xl sm:text-6xl md:text-7xl`
    -   부제목: `text-xl sm:text-2xl`
    -   버튼: `max-w-md` 크기로 조정

### 3. Collect Cards Section 구현

-   **검색 기능**: 플레이스홀더 텍스트와 검색 아이콘
-   **필터 태그**: "All", "Designer", "Developer", "Marketer" 태그
-   **카드 리스트**: JellyJelly 카드들 표시
-   **반응형 디자인**: 모바일 최적화된 간격과 크기

### 4. 폰트 시스템 구축

-   **Next.js Font 최적화**: `next/font/google`을 사용한 K2D 폰트 로드
-   **전역 설정**: `layout.tsx`에서 폰트 변수 설정
-   **유틸리티 클래스**: `globals.css`에 폰트 클래스 생성
    ```css
    .font-k2d-bold {
        font-family: var(--font-k2d);
        font-weight: 700;
    }
    .font-k2d-medium {
        font-family: var(--font-k2d);
        font-weight: 500;
    }
    .font-k2d-semibold {
        font-family: var(--font-k2d);
        font-weight: 600;
    }
    ```
-   **사용법**: `className="font-k2d-bold"`로 간단하게 적용

### 5. 반응형 디자인 최적화

-   **iPhone 14-16 최적화**:
    -   터치 타겟 최소 44px 크기 보장
    -   Safe Area 지원 (`env(safe-area-inset-*)`)
    -   iOS Safari 최적화 (`-webkit-fill-available`)
-   **모바일 우선 접근**: `sm:`, `md:` 브레이크포인트 활용
-   **터치 인터랙션**: 호버/액티브 상태 최적화

### 6. 기술적 개선사항

-   **MetaMask SDK 호환성**: React Native 의존성 문제 해결
-   **Webpack 설정**: `next.config.ts`에서 폴백 설정 추가
-   **성능 최적화**: Next.js Image 컴포넌트 활용
-   **코드 정리**: 불필요한 CSS 클래스 및 import 제거

## 🎨 디자인 구현 현황

### ✅ 완료된 요소

-   [x] 백그라운드 이미지 통합
-   [x] K2D 폰트 시스템
-   [x] 반응형 레이아웃
-   [x] 히어로 섹션 디자인
-   [x] 컬렉션 카드 섹션
-   [x] 버튼 스타일링
-   [x] 텍스트 가독성 개선

### 🔄 현재 상태

-   **Hero Section**: 디자인 이미지와 일치하는 레이아웃 완성
-   **Collect Cards Section**: 기본 구조 완성, 데이터 연동 필요
-   **폰트 시스템**: 전역 설정 완료, 모든 컴포넌트에서 사용 가능
-   **반응형**: iPhone 14-16 최적화 완료

## 🚀 다음 단계 (권장사항)

### 1. 데이터 연동

-   [ ] 실제 카드 데이터 API 연동
-   [ ] 검색 기능 구현
-   [ ] 필터링 로직 구현

### 2. 기능 확장

-   [ ] 카드 상세 보기
-   [ ] 무한 스크롤 구현
-   [ ] 로딩 상태 처리

### 3. UX 개선

-   [ ] 애니메이션 추가
-   [ ] 로딩 스켈레톤
-   [ ] 에러 처리

### 4. 성능 최적화

-   [ ] 이미지 최적화
-   [ ] 번들 크기 분석
-   [ ] 캐싱 전략

## 📁 주요 파일 구조

```
app/
├── (main)/
│   ├── layout.tsx          # 메인 레이아웃
│   └── page.tsx            # 메인 페이지 라우터
├── layout.tsx              # 루트 레이아웃 (폰트 설정)
└── globals.css             # 전역 스타일 (폰트 클래스)

components/
├── main/
│   ├── HeroSection.tsx     # 히어로 섹션
│   └── CollectCardsSection.tsx # 카드 수집 섹션
└── layouts/
    ├── Header.tsx          # 헤더 컴포넌트
    └── FooterNav.tsx       # 푸터 네비게이션

public/assets/
├── landing-page-background.png # 메인 백그라운드
└── mock-basecard.png       # 카드 아바타 이미지
```

## 🎯 성과 요약

1. **디자인 구현**: 목표했던 디자인 이미지와 일치하는 UI 완성
2. **반응형 완성**: iPhone 14-16 최적화된 모바일 경험
3. **폰트 시스템**: 효율적인 전역 폰트 관리 시스템 구축
4. **코드 품질**: Next.js 모범 사례를 따른 깔끔한 코드 구조
5. **성능 최적화**: 폰트 로딩 최적화 및 이미지 최적화

## 📝 기술 스택

-   **Framework**: Next.js 15 (App Router)
-   **Language**: TypeScript
-   **Styling**: Tailwind CSS 4.x
-   **Fonts**: Next.js Font Optimization + K2D
-   **State Management**: Jotai
-   **Web3**: Coinbase OnchainKit
-   **Database**: Drizzle ORM + PostgreSQL (Supabase)

---

**최종 업데이트**: 2025년 1월
**상태**: 메인 페이지 기본 구현 완료 ✅

# BaseCard Mini App - Development Progress

## 🎯 프로젝트 목적

BaseCard NFT Mini App의 메인 페이지를 디자인 이미지에 맞게 개발하고, iPhone 14-16 사용자를 위한 반응형 웹 애플리케이션 구축

## 📋 주요 목표

1. **메인 페이지 디자인 구현**: 제공된 디자인 이미지(`main-page-1.png`, `main-page-2.png`)와 일치하는 UI 구현
2. **백그라운드 이미지 통합**: `landing-page-background.png`와 `mock-basecard.png` 에셋 활용
3. **반응형 디자인**: iPhone 14-16 최적화
4. **폰트 시스템 구축**: K2D 폰트 적용 및 최적화

## ✅ 완료된 작업

### 1. 메인 페이지 구조 재설계

-   **기존 구조**: 단순한 컴포넌트 기반 레이아웃
-   **새로운 구조**: Hero Section + Collect Cards Section으로 분리
-   **파일 구조**:
    ```
    app/(main)/page.tsx - 메인 페이지 라우터
    components/main/HeroSection.tsx - 히어로 섹션
    components/main/CollectCardsSection.tsx - 카드 수집 섹션
    ```

### 2. Hero Section 구현

-   **백그라운드 이미지**: `landing-page-background.png`를 메인 시각 요소로 활용
-   **투명도 제거**: 오버레이 효과 제거하여 원본 이미지 그대로 표시
-   **텍스트 가독성**: `drop-shadow` 효과로 백그라운드 위 텍스트 가독성 확보
-   **3D 카드 제거**: 사용자 요청에 따라 3D 카드 컴포넌트 제거
-   **레이아웃 최적화**:
    -   제목: `text-5xl sm:text-6xl md:text-7xl`
    -   부제목: `text-xl sm:text-2xl`
    -   버튼: `max-w-md` 크기로 조정

### 3. Collect Cards Section 구현

-   **검색 기능**: 플레이스홀더 텍스트와 검색 아이콘
-   **필터 태그**: "All", "Designer", "Developer", "Marketer" 태그
-   **카드 리스트**: JellyJelly 카드들 표시
-   **반응형 디자인**: 모바일 최적화된 간격과 크기

### 4. 폰트 시스템 구축

-   **Next.js Font 최적화**: `next/font/google`을 사용한 K2D 폰트 로드
-   **전역 설정**: `layout.tsx`에서 폰트 변수 설정
-   **유틸리티 클래스**: `globals.css`에 폰트 클래스 생성
    ```css
    .font-k2d-bold {
        font-family: var(--font-k2d);
        font-weight: 700;
    }
    .font-k2d-medium {
        font-family: var(--font-k2d);
        font-weight: 500;
    }
    .font-k2d-semibold {
        font-family: var(--font-k2d);
        font-weight: 600;
    }
    ```
-   **사용법**: `className="font-k2d-bold"`로 간단하게 적용

### 5. 반응형 디자인 최적화

-   **iPhone 14-16 최적화**:
    -   터치 타겟 최소 44px 크기 보장
    -   Safe Area 지원 (`env(safe-area-inset-*)`)
    -   iOS Safari 최적화 (`-webkit-fill-available`)
-   **모바일 우선 접근**: `sm:`, `md:` 브레이크포인트 활용
-   **터치 인터랙션**: 호버/액티브 상태 최적화

### 6. 기술적 개선사항

-   **MetaMask SDK 호환성**: React Native 의존성 문제 해결
-   **Webpack 설정**: `next.config.ts`에서 폴백 설정 추가
-   **성능 최적화**: Next.js Image 컴포넌트 활용
-   **코드 정리**: 불필요한 CSS 클래스 및 import 제거

## 🎨 디자인 구현 현황

### ✅ 완료된 요소

-   [x] 백그라운드 이미지 통합
-   [x] K2D 폰트 시스템
-   [x] 반응형 레이아웃
-   [x] 히어로 섹션 디자인
-   [x] 컬렉션 카드 섹션
-   [x] 버튼 스타일링
-   [x] 텍스트 가독성 개선

### 🔄 현재 상태

-   **Hero Section**: 디자인 이미지와 일치하는 레이아웃 완성
-   **Collect Cards Section**: 기본 구조 완성, 데이터 연동 필요
-   **폰트 시스템**: 전역 설정 완료, 모든 컴포넌트에서 사용 가능
-   **반응형**: iPhone 14-16 최적화 완료

## 🚀 다음 단계 (권장사항)

### 1. 데이터 연동

-   [ ] 실제 카드 데이터 API 연동
-   [ ] 검색 기능 구현
-   [ ] 필터링 로직 구현

### 2. 기능 확장

-   [ ] 카드 상세 보기
-   [ ] 무한 스크롤 구현
-   [ ] 로딩 상태 처리

### 3. UX 개선

-   [ ] 애니메이션 추가
-   [ ] 로딩 스켈레톤
-   [ ] 에러 처리

### 4. 성능 최적화

-   [ ] 이미지 최적화
-   [ ] 번들 크기 분석
-   [ ] 캐싱 전략

## 📁 주요 파일 구조

```
app/
├── (main)/
│   ├── layout.tsx          # 메인 레이아웃
│   └── page.tsx            # 메인 페이지 라우터
├── layout.tsx              # 루트 레이아웃 (폰트 설정)
└── globals.css             # 전역 스타일 (폰트 클래스)

components/
├── main/
│   ├── HeroSection.tsx     # 히어로 섹션
│   └── CollectCardsSection.tsx # 카드 수집 섹션
└── layouts/
    ├── Header.tsx          # 헤더 컴포넌트
    └── FooterNav.tsx       # 푸터 네비게이션

public/assets/
├── landing-page-background.png # 메인 백그라운드
└── mock-basecard.png       # 카드 아바타 이미지
```

## 🎯 성과 요약

1. **디자인 구현**: 목표했던 디자인 이미지와 일치하는 UI 완성
2. **반응형 완성**: iPhone 14-16 최적화된 모바일 경험
3. **폰트 시스템**: 효율적인 전역 폰트 관리 시스템 구축
4. **코드 품질**: Next.js 모범 사례를 따른 깔끔한 코드 구조
5. **성능 최적화**: 폰트 로딩 최적화 및 이미지 최적화

## 📝 기술 스택

-   **Framework**: Next.js 15 (App Router)
-   **Language**: TypeScript
-   **Styling**: Tailwind CSS 4.x
-   **Fonts**: Next.js Font Optimization + K2D
-   **State Management**: Jotai
-   **Web3**: Coinbase OnchainKit
-   **Database**: Drizzle ORM + PostgreSQL (Supabase)

---

**최종 업데이트**: 2025년 1월
**상태**: 메인 페이지 기본 구현 완료 ✅
