# BaseCard API Mutation Tests
# CREATE, UPDATE, DELETE 테스트 - 데이터 변경 테스트

### Variables
@baseUrl = http://localhost:3000
@testAddress = 0x9999999999999999999999999999999999999999
@aliceAddress = 0x1234567890123456789012345678901234567890
@bobAddress = 0x2345678901234567890123456789012345678901

### ===========================================
### CARDS API - Mutation Tests
### ===========================================

### Create a new test card
POST {{baseUrl}}/api/cards
Content-Type: application/json

{
  "nickname": "Test User",
  "bio": "This is a test user created via API",
  "imageURI": "https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=400&h=400&fit=crop&crop=face",
  "basename": "testuser",
  "role": "API Tester",
  "skills": ["API Testing", "HTTP", "REST", "Postman"],
  "address": "{{testAddress}}"
}

### Update Alice's card
PUT {{baseUrl}}/api/card/{{aliceAddress}}
Content-Type: application/json

{
  "nickname": "Alice Developer (Updated)",
  "bio": "Updated bio for Alice - now with more experience!",
  "role": "Senior Blockchain Developer & Team Lead",
  "skills": ["Solidity", "TypeScript", "React", "Web3", "DeFi", "Team Management"]
}

### Update Bob's card
PUT {{baseUrl}}/api/card/{{bobAddress}}
Content-Type: application/json

{
  "nickname": "Bob Builder (Updated)",
  "bio": "Updated bio for Bob - now specializing in full-stack Web3 development",
  "role": "Lead Full-Stack Developer",
  "skills": ["JavaScript", "React", "Node.js", "PostgreSQL", "Web3", "Architecture"]
}

### ===========================================
### PROGRAMS API - Mutation Tests
### ===========================================

### Create a new bounty program
POST {{baseUrl}}/api/programs
Content-Type: application/json

{
  "title": "API Test Bounty Program",
  "description": "# API Test Bounty Program\n\nThis is a test bounty program created via API.\n\n## Requirements\n- API testing knowledge\n- HTTP protocol understanding\n- REST API design\n\n## Bounty Details\n- **Total Reward**: 0.5 ETH\n- **Duration**: 1 week\n- **Difficulty**: Beginner",
  "ownerCardId": 1,
  "type": "bounty"
}

### Create a new project program
POST {{baseUrl}}/api/programs
Content-Type: application/json

{
  "title": "API Test Project",
  "description": "# API Test Project\n\nThis is a test project created via API.\n\n## Project Goals\n- Test API functionality\n- Validate data flow\n- Ensure proper error handling\n\n## Success Criteria\n- All API endpoints working\n- Data validation successful\n- Error handling implemented",
  "ownerCardId": 2,
  "type": "project"
}

### ===========================================
### COLLECTIONS API - Mutation Tests
### ===========================================

### Add Alice's card to Bob's collection
POST {{baseUrl}}/api/collections
Content-Type: application/json

{
  "cardId": 2,
  "collectCardId": 1
}

### Add Bob's card to Alice's collection
POST {{baseUrl}}/api/collections
Content-Type: application/json

{
  "cardId": 1,
  "collectCardId": 2
}

### Add Carol's card to Alice's collection
POST {{baseUrl}}/api/collections
Content-Type: application/json

{
  "cardId": 1,
  "collectCardId": 3
}

### Add David's card to Bob's collection
POST {{baseUrl}}/api/collections
Content-Type: application/json

{
  "cardId": 2,
  "collectCardId": 4
}

### ===========================================
### ERROR HANDLING TESTS
### ===========================================

### Try to create card with duplicate address
POST {{baseUrl}}/api/cards
Content-Type: application/json

{
  "nickname": "Duplicate Test",
  "bio": "This should fail due to duplicate address",
  "address": "{{aliceAddress}}"
}

### Try to update non-existent card
PUT {{baseUrl}}/api/card/0x0000000000000000000000000000000000000000
Content-Type: application/json

{
  "nickname": "Non-existent User"
}

### Try to create program with invalid card ID
POST {{baseUrl}}/api/programs
Content-Type: application/json

{
  "title": "Invalid Program",
  "description": "This should fail due to invalid ownerCardId",
  "ownerCardId": 999,
  "type": "bounty"
}

### Try to create collection with invalid card IDs
POST {{baseUrl}}/api/collections
Content-Type: application/json

{
  "cardId": 999,
  "collectCardId": 999
}
